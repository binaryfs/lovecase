local lovecase = require("init")

local expect = lovecase.expect
local suite = lovecase.newSuite("expect")

suite:describe("isTrue()", function ()
  suite:test("should assert that the given value is true", function ()
    expect.noError(function ()
      expect.isTrue(true)
    end)
    expect.error(function ()
      expect.isTrue(false)
    end)
    expect.error(function ()
      expect.isTrue(1)
    end)
    expect.error(function ()
      expect.isTrue("true")
    end)
  end)
end)

suite:describe("isFalse()", function ()
  suite:test("should assert that the given value is false", function ()
    expect.noError(function ()
      expect.isFalse(false)
    end)
    expect.error(function ()
      expect.isFalse(true)
    end)
    expect.error(function ()
      expect.isFalse(0)
    end)
    expect.error(function ()
      expect.isFalse(nil)
    end)
  end)
end)

suite:describe("error()", function ()
  suite:test("should assert that an error is raised", function ()
    expect.error(function ()
      error("This error is expected")
    end)
  end)
end)

suite:describe("equal()", function ()
  suite:test("should assert that two values are equal", function ()
    expect.noError(function ()
      expect.equal(123, 123)
      expect.equal("abc", "abc")
      expect.equal({1, 2, 3}, {1, 2, 3})
      expect.equal({a = 11, b = 22}, {b = 22, a = 11})
      expect.equal({a = 11, b = {"a", "b"}}, {a = 11, b = {"a", "b"}})
    end)
    expect.error(function ()
      expect.equal(123, "123")
    end)
    expect.error(function ()
      expect.equal(123, 456)
    end)
    expect.error(function ()
      expect.equal({1, 2, 3}, {1, 2})
    end)
    expect.error(function ()
      expect.equal({a = 11, b = 22}, {a = 33, b = 22})
    end)
  end)

  suite:test("should call the __eq metamethod, if available", function ()
    local called = false
    local TestClass = {}
    TestClass.__index = TestClass
    TestClass.__eq = function (a, b)
      called = true
      return true
    end
    local a = setmetatable({}, TestClass)
    local b = setmetatable({}, TestClass)
    expect.equal(a, b)
    expect.isTrue(called)
  end)

  suite:test("should call an equality method, if available", function ()
    local called = false
    local TestClass = {}
    TestClass.__index = TestClass
    TestClass.equal = function (a, b)
      called = true
      return true
    end
    local a = setmetatable({}, TestClass)
    local b = setmetatable({}, TestClass)
    expect.equal(a, b)
    expect.isTrue(called)
  end)
end)

suite:describe("notEqual()", function ()
  suite:test("should assert that two values are not equal", function ()
    expect.noError(function ()
      expect.notEqual(123, 456)
      expect.notEqual("abc", "xyz")
      expect.notEqual({1, 2, 3}, {9, 8, 7})
      expect.notEqual({a = 11, b = 22}, {c = 33, d = 44})
    end)
    expect.error(function ()
      expect.notEqual(123, 123)
    end)
    expect.error(function ()
      expect.notEqual({1, 2, 3}, {1, 2, 3})
    end)
    expect.error(function ()
      expect.notEqual({a = 11, b = 22}, {a = 11, b = 22})
    end)
  end)
end)

suite:describe("almostEqual()", function ()
  suite:test("should assert that two values are almost equal", function ()
    expect.noError(function ()
      expect.almostEqual(math.sqrt(2) * math.sqrt(2), 2)
      expect.almostEqual({999, 100000000000000.01}, {999, 100000000000000.011})
    end)
    expect.error(function ()
      expect.almostEqual(100.01, 100.011)
    end)
    expect.error(function ()
      expect.almostEqual({999, 100.01}, {999, 100.011})
    end)
  end)
end)

suite:describe("notAlmostEqual()", function ()
  suite:test("should assert that two values are NOT almost equal", function ()
    expect.noError(function ()
      expect.notAlmostEqual(100.01, 100.011)
      expect.notAlmostEqual(0.001, 0.0010000001)
    end)
    expect.error(function ()
      expect.notAlmostEqual(math.sqrt(2) * math.sqrt(2), 2)
    end)
  end)
end)

suite:describe("same()", function ()
  suite:test("should assert that two values are the same", function ()
    expect.noError(function ()
      expect.same(123, 123)
      expect.same("abc", "abc")
      local t = {1, 2, 3}
      expect.same(t, t)
    end)
    expect.error(function ()
      expect.same(123, 456)
    end)
    expect.error(function ()
      expect.same({1, 2, 3}, {1, 2, 3})
    end)
  end)
end)

suite:describe("notSame()", function ()
  suite:test("should assert that two values are not the same", function ()
    expect.noError(function ()
      expect.notSame(123, 321)
      expect.notSame("abc", "xyz")
      expect.notSame({}, {})
    end)
    expect.error(function ()
      expect.notSame(123, 123)
    end)
    expect.error(function ()
      local t = {a = 1, b = 2}
      expect.notSame(t, t)
    end)
  end)
end)

suite:describe("lessThan()", function ()
  suite:test("should assert that the first value is smaller than the second", function ()
    expect.noError(function ()
      expect.lessThan(1, 2)
    end)
    expect.error(function ()
      expect.lessThan(2, 1)
    end)
    expect.error(function ()
      expect.lessThan(1, 1)
    end)
  end)
end)

suite:describe("lessThanOrEqual()", function ()
  suite:test("should assert that the first value is smaller than or equal to the second", function ()
    expect.noError(function ()
      expect.lessThanOrEqual(1, 2)
    end)
    expect.noError(function ()
      expect.lessThanOrEqual(1, 1)
    end)
    expect.error(function ()
      expect.lessThanOrEqual(2, 1)
    end)
  end)
end)

suite:describe("greaterThan()", function ()
  suite:test("should assert that the first value is greater than the second", function ()
    expect.noError(function ()
      expect.greaterThan(2, 1)
    end)
    expect.error(function ()
      expect.greaterThan(1, 2)
    end)
    expect.error(function ()
      expect.greaterThan(1, 1)
    end)
  end)
end)

suite:describe("greaterThanOrEqual()", function ()
  suite:test("should assert that the first value is greater than or equal to the second", function ()
    expect.noError(function ()
      expect.greaterThanOrEqual(2, 1)
    end)
    expect.noError(function ()
      expect.greaterThanOrEqual(1, 1)
    end)
    expect.error(function ()
      expect.greaterThanOrEqual(1, 2)
    end)
  end)
end)

return suite